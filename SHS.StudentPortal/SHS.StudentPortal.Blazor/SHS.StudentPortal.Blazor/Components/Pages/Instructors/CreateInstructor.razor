@using MediatR
@using SHS.StudentPortal.App.Abstractions
@using SHS.StudentPortal.App.Abstractions.Security
@using SHS.StudentPortal.App.Commands
@using SHS.StudentPortal.App.Queries
@using SHS.StudentPortal.Common.Models
@using SHS.StudentPortal.Common.Utilities

@inject IUserStateService UserStateService;
@inject NavigationManager NavigationManager;
@inject ISender Sender;
@inject NotificationService NotificationService;
@inject ILoadingService LoadingService;
@inject DialogService DialogService;

<RadzenTemplateForm Data="InstructorInfo" Context="InstructorInfoAdminViewDTO" @ref="InstructorInfoFormRef" Submit="@(async(CreateInstructorViewModel args) => { await Submit(); })">

    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="1rem">

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="0.5rem">
            <div>
                <div>
                    <RadzenFormField Text="Employee ID" AllowFloatingLabel="false">
                        <RadzenTextBox Name="InstructorEmpId" @bind-Value="InstructorInfo.EmployeeId" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorEmpId" Popup="false" Text="Employee ID is Required" />
            </div>
            <div>
                <div>
                    <RadzenFormField Text="Major" AllowFloatingLabel="false">
                        <RadzenTextBox Name="InstructorMajor" @bind-Value="InstructorInfo.Major" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorMajor" Popup="false" Text="Major is Required" />
            </div>
            <div>
                <div>
                    <RadzenFormField Text="Department" AllowFloatingLabel="false">
                        <RadzenDropDown Data="Departments"
                        @bind-Value="InstructorInfo.DepartmentId"
                        ValueProperty="Key"
                        TextProperty="Value"
                        Placeholder="Select Department"
                        AllowClear=true
                        Name="InstructorDept"
                        Style="width: 200px" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorDept" Popup="false" Text="Department is Required" />
            </div>
            <div>
                <div>
                    <RadzenFormField Text="Advisory Section" AllowFloatingLabel="false">
                        <RadzenDropDown Data="Sections"
                        @bind-Value="InstructorInfo.AdvisorySectionId"
                        ValueProperty="Key"
                        TextProperty="Value"
                        Placeholder="Select Section"
                        AllowClear=true
                        Name="InstructorAdvisory"
                        Style="width: 200px" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorAdvisory" Popup="false" Text="Advisory is Required" />
            </div>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="0.5rem">
            <div>
                <div>
                    <RadzenFormField Text="First Name" AllowFloatingLabel="false">
                        <RadzenTextBox Name="InstructorFN" @bind-Value="InstructorInfo.FirstName" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorFN" Popup="false" Text="First name is Required" />
            </div>
            <div>
                <RadzenFormField Text="Middle Name" AllowFloatingLabel="false">
                    <RadzenTextBox Name="InstructorMN" @bind-Value="InstructorInfo.MiddleName" />
                </RadzenFormField>
            </div>
            <div>
                <div>
                    <RadzenFormField Text="Last Name" AllowFloatingLabel="false">
                        <RadzenTextBox Name="InstructorLN" @bind-Value="InstructorInfo.LastName" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorLN" Popup="false" Text="Last name is Required" />
            </div>
            <div>
                <div>
                    <RadzenFormField Text="Contact Info" AllowFloatingLabel="false">
                        <RadzenTextBox Name="InstructorInfoContactInfo" @bind-Value="InstructorInfo.ContactInfo" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorInfoContactInfo" Popup="false" Text="Contact Info is Required" />
            </div>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Gap="0.5rem">
            <div>
                <div>
                    <RadzenFormField Text="Email Address" AllowFloatingLabel="false">
                        <RadzenTextBox Name="InstructorEmailAddress" @bind-Value="InstructorInfo.EmailAddress" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorEmailAddress" Popup="false" Text="Email Address is Required" />
            </div>
            <div>
                <div>
                    <RadzenFormField Text="Username" AllowFloatingLabel="false">
                        <RadzenTextBox Name="InstructorUsername" @bind-Value="InstructorInfo.Username" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorUsername" Popup="false" Text="Username is Required" />
            </div>
            <div>
                <div>
                    <RadzenFormField Text="Password" AllowFloatingLabel="false">
                        <RadzenPassword Name="InstructorPassword" @bind-Value="InstructorInfo.Password" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorPassword" Popup="false" Text="Password is Required" />
            </div>
            <div>
                <div>
                    <RadzenFormField Text="Confirm Password" AllowFloatingLabel="false">
                        <RadzenPassword Name="InstructorConfirmPassword" @bind-Value="ConfirmPassword" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="InstructorConfirmPassword" Popup="false" Text="Confirm Password is Required" />
            </div>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" AlignItems="AlignItems.End" Gap="5px">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Text="Save" IsBusy="LoadingService.IsLoading" />
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Text="Close" Click="Close" IsBusy="LoadingService.IsLoading" />
        </RadzenStack>

    </RadzenStack>

</RadzenTemplateForm>

@code {
    private UserPrincipalViewModel CurrentUser;

    private CreateInstructorViewModel InstructorInfo = CreateInstructorViewModel.New();

    private RadzenTemplateForm<CreateInstructorViewModel> InstructorInfoFormRef;

    private List<KeyValuePair<int, string>> Departments = new();
    private List<KeyValuePair<Guid, string>> Sections = new();

    private string ConfirmPassword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUserInfo();
        await LoadDepartments();
        await LoadSections();
    }

    private async Task LoadCurrentUserInfo()
    {
        await UserStateService.Initialize();
        var principalUser = UserStateService.GetUser();

        if (!(principalUser.Identity?.IsAuthenticated) ?? true)
            NavigationManager.NavigateTo("/Login");
        else
        {
            CurrentUser = new()
                {
                    UserId = Guid.Parse(principalUser.Claims.FirstOrDefault(c => c.Type == "UserId")!.Value),
                    Username = principalUser.Claims.FirstOrDefault(c => c.Type == "Username")!.Value,
                    Firstname = principalUser.Claims.FirstOrDefault(c => c.Type == "FirstName")!.Value,
                    Middlename = principalUser.Claims.FirstOrDefault(c => c.Type == "MiddleName")!.Value,
                    Lastname = principalUser.Claims.FirstOrDefault(c => c.Type == "LastName")!.Value,
                };
        }
    }

    private async Task LoadDepartments()
    {
        var query = new GetDepartmentDropdownListQuery();

        var result = await Sender.Send(query);

        if (result.IsSuccess)
        {
            Departments = result.Data!;
        }
        else
            NotificationService.Notify(NotificationHelper.ErrorNotif(result.Error!.Message));
    }

    private async Task LoadSections()
    {
        var query = new GetSectionListQuery(true);

        var result = await Sender.Send(query);

        if (result.IsSuccess)
            Sections = result.Data!;
        else
            NotificationService.Notify(NotificationHelper.ErrorNotif(result.Error!.Message));
    }

    private async Task Submit()
    {
        if (LoadingService.IsLoading)
            return;

        var command = new CreateInstructorCommand(CurrentUser.UserId, InstructorInfo);

        LoadingService.IsLoading = true;

        var result = await Sender.Send(command);

        LoadingService.IsLoading = false;

        if (result.IsSuccess)
        {
            NotificationService.Notify(NotificationHelper.SuccessNotif("Instructor Created"));

            DialogService.Close(true);
        }
        else
            NotificationService.Notify(NotificationHelper.ErrorNotif(result.Error!.Message));
    }

    private async Task Close()
    {
        if (LoadingService.IsLoading)
            return;

        if (InstructorInfoFormRef.EditContext.IsModified())
        {
            var confirmResult = await DialogService.Confirm("Discard changes?", options: DialogHelper.DefaultConfirmOptions);

            if (confirmResult!.Value)
                DialogService.Close(false);
        }
        else
            DialogService.Close(false);
    }
}
