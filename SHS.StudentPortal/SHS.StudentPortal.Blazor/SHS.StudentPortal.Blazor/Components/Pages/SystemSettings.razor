@page "/systemsettings"
@page "/systemsettings/index"

@using MediatR
@using SHS.StudentPortal.App.Abstractions
@using SHS.StudentPortal.App.Abstractions.Security
@using SHS.StudentPortal.App.Commands
@using SHS.StudentPortal.App.Queries
@using SHS.StudentPortal.Common.Models
@using SHS.StudentPortal.Common.Utilities

@inject IUserStateService UserStateService;
@inject NavigationManager NavigationManager;
@inject ISender Sender;
@inject NotificationService NotificationService;
@inject ILoadingService LoadingService;
@inject DialogService DialogService;

<div class="container-fluid">
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Start" Gap="2rem">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Start" Gap="1rem">
                <div>
                    <RadzenFormField Text="Academic Year" AllowFloatingLabel="false">
                        <RadzenDropDown @bind-Value="CurrentAcademicYear" Data="AcademicYears" TextProperty="Value" ValueProperty="Key" Placeholder="Select Academic Year" />
                    </RadzenFormField>
                </div>
                <div>
                    <RadzenFormField Text="Semester" AllowFloatingLabel="false">
                        <RadzenDropDown @bind-Value="CurrentSemester" Data="Semesters" TextProperty="Value" ValueProperty="Key" Placeholder="Select Semester" />
                    </RadzenFormField>
                </div>
            </RadzenStack>

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" AlignItems="AlignItems.End" Gap="5px">
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Text="Save" Click="SaveSystemSettings" IsBusy="LoadingService.IsLoading" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    private UserPrincipalViewModel CurrentUser;

    private string CurrentSemester = "1st";
    private string CurrentAcademicYear = "2023-2024";

    private List<KeyValuePair<string, string>> AcademicYears = new()
    {
        new KeyValuePair<string, string>("2023-2024", "2023-2024"),
        new KeyValuePair<string, string>("2024-2025", "2024-2025"),
        new KeyValuePair<string, string>("2025-2026", "2025-2026"),
        new KeyValuePair<string, string>("2026-2027", "2026-2027"),
        new KeyValuePair<string, string>("2027-2028", "2027-2028"),
        new KeyValuePair<string, string>("2028-2029", "2028-2029"),
        new KeyValuePair<string, string>("2029-2030", "2029-2030"),
    };
    private List<KeyValuePair<string, string>> Semesters = new()
    {
        new KeyValuePair<string, string>("1st", "1st"),
        new KeyValuePair<string, string>("2nd", "2nd"),
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentSemesterAndAcademicYear();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadCurrentUserInfo();
        }
    }

    private async Task LoadCurrentUserInfo()
    {
        await UserStateService.Initialize();

        var principalUser = UserStateService.GetUser();

        if (!(principalUser.Identity?.IsAuthenticated) ?? true)
            NavigationManager.NavigateTo("/Login");
        else
        {
            CurrentUser = new()
            {
                UserId = Guid.Parse(principalUser.Claims.FirstOrDefault(c => c.Type == "UserId")!.Value),
                Username = principalUser.Claims.FirstOrDefault(c => c.Type == "Username")!.Value,
                Firstname = principalUser.Claims.FirstOrDefault(c => c.Type == "FirstName")!.Value,
                Middlename = principalUser.Claims.FirstOrDefault(c => c.Type == "MiddleName")!.Value,
                Lastname = principalUser.Claims.FirstOrDefault(c => c.Type == "LastName")!.Value,
            };
        }
    }

    private async Task LoadCurrentSemesterAndAcademicYear()
    {
        LoadingService.IsLoading = true;

        var query = new GetCurrentSemesterAndAcademicYearQuery();

        var result = await Sender.Send(query);

        LoadingService.IsLoading = false;

        if (result.IsSuccess)
        {
            CurrentSemester = result.Data!.Item1;
            CurrentAcademicYear = result.Data!.Item2;
        }
        else
            NotificationService.Notify(NotificationHelper.ErrorNotif(result.Error!.Message));
    }

    private async Task SaveSystemSettings()
    {
        if (LoadingService.IsLoading)
            return;

        var command = new UpdateSystemSettingsCommand(CurrentAcademicYear, CurrentSemester, CurrentUser.UserId);

        LoadingService.IsLoading = true;

        var result = await Sender.Send(command);

        LoadingService.IsLoading = false;

        if(result.IsSuccess)
            NotificationService.Notify(NotificationHelper.SuccessNotif("System Settings Updated", onClose: () => NavigationManager.NavigateTo("/systemsettings")));
        else
            NotificationService.Notify(NotificationHelper.ErrorNotif(result.Error!.Message));
    }
}
