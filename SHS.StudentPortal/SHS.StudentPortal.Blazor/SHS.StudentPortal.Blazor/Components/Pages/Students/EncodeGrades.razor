

@using MediatR
@using SHS.StudentPortal.App.Abstractions
@using SHS.StudentPortal.App.Abstractions.Security
@using SHS.StudentPortal.App.Queries
@using SHS.StudentPortal.Common.Models
@using SHS.StudentPortal.Common.Utilities

@inject DialogService DialogService;
@inject ILoadingService LoadingService;
@inject ISender Sender;
@inject NotificationService NotificationService;
@inject IUserStateService UserStateService;
@inject NavigationManager NavigationManager;

<RadzenTemplateForm Data="AcademicRecord" Context="NewAcademicRecordDTO" @ref="AcademicRecordFormRef" Submit="@((NewAcademicRecordDTO args) => { EncodeGrade(); })">

    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="1rem">

        <div>
            <RadzenFormField Text="Academic Year" AllowFloatingLabel="false">
                <RadzenDropDown @bind-Value="AcademicRecord.AcademicYear" Data="AcademicYears" TextProperty="Value" ValueProperty="Key" Placeholder="Select Academic Year" />
            </RadzenFormField>
        </div>
        <div>
            <RadzenFormField Text="Semester" AllowFloatingLabel="false">
                <RadzenDropDown @bind-Value="AcademicRecord.Semester" Data="Semesters" TextProperty="Value" ValueProperty="Key" Placeholder="Select Semester" />
            </RadzenFormField>
        </div>
        <div>
            <div>
                <RadzenFormField Text="Subject" AllowFloatingLabel="false">
                    <RadzenDropDown Name="AcademicRecordSubject" @bind-Value="AcademicRecord.SubjectId" Data="Subjects" TextProperty="Value" ValueProperty="Key" Placeholder="Select Subject" />
                </RadzenFormField>
            </div>
            <RadzenRequiredValidator Component="AcademicRecordSubject" Text="Subject Name is required" Popup="false" />
        </div>
        @if (AcademicRecord.SubjectId == 0)
        {
            <div>
                <div>
                    <RadzenFormField Text="Subject Name" AllowFloatingLabel="false">
                        <RadzenTextBox Name="AcademicRecordSubjectName" @bind-Value="AcademicRecord.SubjectName" />
                    </RadzenFormField>
                </div>
                <RadzenRequiredValidator Component="AcademicRecordSubjectName" Text="Subject Name is required" Popup="false" />
            </div>
        }
        <div>
            <div>
                <RadzenFormField Text="Rating" AllowFloatingLabel="false">
                    <RadzenTextBox Name="AcademicRecordRating" @bind-Value="AcademicRecord.Rating" />
                </RadzenFormField>
            </div>
            <RadzenRequiredValidator Component="AcademicRecordRating" Text="Rating is required" Popup="false" />
        </div>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" AlignItems="AlignItems.End" Gap="5px">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Text="Encode" IsBusy="LoadingService.IsLoading" />
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Text="Close" Click="Close" IsBusy="LoadingService.IsLoading" />
        </RadzenStack>

    </RadzenStack>

</RadzenTemplateForm>

@code {
    private UserPrincipalViewModel CurrentUser;

    [Parameter]
    public List<AcademicRecordAdminViewDTO> ExistingRecords { get; set; }

    private NewAcademicRecordDTO AcademicRecord = new()
    {
        AcademicYear = "2025-2026",
        Semester = "1st",
        Rating = string.Empty,
        SubjectId = -1,
        SubjectName = string.Empty,
    };
    private RadzenTemplateForm<NewAcademicRecordDTO> AcademicRecordFormRef;

    private List<KeyValuePair<string, string>> AcademicYears = new()
    {
        new KeyValuePair<string, string>("2023-2024", "2023-2024"),
        new KeyValuePair<string, string>("2024-2025", "2024-2025"),
        new KeyValuePair<string, string>("2025-2026", "2025-2026"),
    };
    private List<KeyValuePair<string, string>> Semesters = new()
    {
        new KeyValuePair<string, string>("1st", "1st"),
        new KeyValuePair<string, string>("2nd", "2nd"),
    };
    private List<KeyValuePair<int, string>> Subjects = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjectList();
        await LoadCurrentUserInfo();
    }

    private async Task LoadSubjectList()
    {
        var query = new GetSubjectDropdownListQuery();

        var result = await Sender.Send(query);

        if (result.IsSuccess)
            Subjects = result.Data!;
        else
            NotificationService.Notify(NotificationHelper.ErrorNotif(result.Error!.Message));
    }

    private async Task LoadCurrentUserInfo()
    {
        await UserStateService.Initialize();
        var principalUser = UserStateService.GetUser();

        if (!(principalUser.Identity?.IsAuthenticated) ?? true)
            NavigationManager.NavigateTo("/Login");
        else
        {
            CurrentUser = new()
                {
                    UserId = Guid.Parse(principalUser.Claims.FirstOrDefault(c => c.Type == "UserId")!.Value),
                    Username = principalUser.Claims.FirstOrDefault(c => c.Type == "Username")!.Value,
                    Firstname = principalUser.Claims.FirstOrDefault(c => c.Type == "FirstName")!.Value,
                    Middlename = principalUser.Claims.FirstOrDefault(c => c.Type == "MiddleName")!.Value,
                    Lastname = principalUser.Claims.FirstOrDefault(c => c.Type == "LastName")!.Value,
                };
        }
    }

    private void Close()
    {
        if (LoadingService.IsLoading)
            return;

        DialogService.Close(null);
    }

    private void EncodeGrade()
    {
        if (LoadingService.IsLoading)
            return;

        if(ExistingRecords.Any(er => er.SubjectId == AcademicRecord.SubjectId &&
                                     er.SubjectName.ToLower() == AcademicRecord.SubjectName.ToLower() &&
                                     er.AcademicYear.ToLower() == AcademicRecord.AcademicYear.ToLower() &&
                                     er.Semester.ToLower() == AcademicRecord.Semester.ToLower()))
        {
            NotificationService.Notify(NotificationHelper.WarningNotif("This record already exists."));

            return;
        }

        AcademicRecordAdminViewDTO newAcademicRecord = new()
        {
            Id = 0,
            AcademicYear = AcademicRecord.AcademicYear,
            Semester = AcademicRecord.Semester,
            SubjectId = AcademicRecord.SubjectId,
            SubjectName = AcademicRecord.SubjectName,
            Rating = AcademicRecord.Rating,
            EncodedDate = DateTime.Now,
            EncodedBy = $"Prof. {CurrentUser.Firstname} {CurrentUser.Lastname}",
            EncodedById = CurrentUser.UserId,
            VerifiedDate = null,
            VerifiedBy = "N/A",
            VerifiedById = null,
            TempId = 0
        };

        DialogService.Close(newAcademicRecord);
    }
}
