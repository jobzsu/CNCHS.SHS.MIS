@page "/students"
@page "/students/index"

@using MediatR
@using SHS.StudentPortal.App.Abstractions
@using SHS.StudentPortal.App.Queries
@using SHS.StudentPortal.Common.Models
@using SHS.StudentPortal.Common.Utilities
@using SHS.StudentPortal.Common.Utilities.Models

@inject ILoadingService LoadingService;
@inject ISender Sender;
@inject NotificationService NotificationService;
@inject DialogService DialogService;

<div class="container-fluid">
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Start" Gap="2rem">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Start" Gap="1rem">
                <RadzenFormField Text="Year Level" Variant="Variant.Outlined" AllowFloatingLabel="false">
                    <RadzenDropDown Data="GradeLevels"
                    @bind-Value="selectedYearLevel"
                    ValueProperty="Key"
                    TextProperty="Value"
                    Placeholder="Select Year Level"
                    AllowClear=true />
                </RadzenFormField>
                <RadzenFormField Text="Section" Variant="Variant.Outlined" AllowFloatingLabel="false">
                    <RadzenDropDown Data="Sections"
                    @bind-Value="selectedSection"
                    ValueProperty="Key"
                    TextProperty="Value"
                    Placeholder="Select Section"
                    AllowClear=true />
                </RadzenFormField>
                <RadzenFormField Text="Track" Variant="Variant.Outlined" AllowFloatingLabel="false">
                    <RadzenDropDown Data="Tracks"
                    @bind-Value="selectedTrack"
                    ValueProperty="Id"
                    TextProperty="Name"
                    Placeholder="Select Track"
                    AllowClear=true
                    Style="width: 250px"
                    Change="FilterStrandDropdownOnTrackSelect" />
                </RadzenFormField>
                @if (hasStrands)
                {
                    <RadzenFormField Text="Strand" Variant="Variant.Outlined" AllowFloatingLabel="false">
                        <RadzenDropDown Data="Strands"
                        @bind-Value="selectedStrand"
                        ValueProperty="Id"
                        TextProperty="Name"
                        Placeholder="Select Strand"
                        AllowClear=true
                        Style="width: 500px" />
                    </RadzenFormField>
                }
                <RadzenButton ButtonType="ButtonType.Button"
                ButtonStyle="ButtonStyle.Success"
                Size="ButtonSize.Medium"
                Icon="search"
                IsBusy="LoadingService.IsLoading"
                Text="Search"
                Click="DoSearch"
                Style="margin-top:10px" />
                <RadzenButton ButtonType="ButtonType.Button"
                ButtonStyle="ButtonStyle.Info"
                Size="ButtonSize.Medium"
                Icon="restart_alt"
                IsBusy="LoadingService.IsLoading"
                Text="Reset"
                Click="ResetFilters"
                Style="margin-top:10px" />
            </RadzenStack>
            <RadzenDataGrid style="height: 335px"
            @ref="grid"
            IsLoading="LoadingService.IsLoading"
            Count="@count"
            Data="@students"
            LoadData="@LoadData"
            AllowSorting="false"
            AllowFiltering="false"
            AllowPaging="true"
            PageSize="5"
            RowClick=@((DataGridRowMouseEventArgs<StudentListViewModel> args) => ViewStudentInfo(args))
            PagerHorizontalAlign="HorizontalAlign.Center"
            PagerPosition="PagerPosition.Bottom"
            ShowPagingSummary="true">
                <EmptyTemplate>
                    <p style="color: black; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(StudentListViewModel.StudentId)" Title="Student ID" Width="120px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(StudentListViewModel.Name)" Title="Name" Width="160px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(StudentListViewModel.Gender)" Title="Gender" Width="120px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(StudentListViewModel.YearLevel)" Title="Year Level" Width="120px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(StudentListViewModel.TrackAndStrand)" Title="Track & Strand" Width="300px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(StudentListViewModel.Status)" Title="Status" Width="160px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Width="100px" TextAlign="TextAlign.Center">
                        <Template>
                            <RadzenButton ButtonType="ButtonType.Button"
                            ButtonStyle="ButtonStyle.Primary"
                            Size="ButtonSize.Small"
                            Icon="edit"
                            IsBusy="LoadingService.IsLoading"
                            Text="View" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    </RadzenCard>
</div>

@code {

    private RadzenDataGrid<StudentListViewModel> grid;
    private int count = 0;
    private IEnumerable<StudentListViewModel> students;
    private int? selectedYearLevel = null;
    private Guid? selectedSection = null;
    private string? selectedTrack = null;
    private string? selectedStrand = null;
    private bool hasStrands = false;

    private List<KeyValuePair<int, string>> GradeLevels = new()
    {
        new(11, "Grade 11"),
        new(12, "Grade 12")
    };

    private List<KeyValuePair<Guid, string>> Sections = new();

    private List<Track> Tracks = Track.GetAllTracks;

    private List<Strand> Strands = Strand.GetAllStrands;

    protected override async Task OnInitializedAsync()
    {
        await LoadSectionList();
    }

    private async Task LoadData(LoadDataArgs args)
    {
        LoadingService.IsLoading = true;

        var filters = StudentPaginationFilter.NewStudentListSearch(null,
            selectedYearLevel ?? 0,
            selectedSection?.ToString() ?? null,
            selectedTrack,
            selectedStrand,
            1);

        var query = new GetStudentListQuery(filters);

        var result = await Sender.Send(query);

        LoadingService.IsLoading = false;

        if (result.IsSuccess)
        {
            var resultQuery = result.Data!;

            count = resultQuery.Count();

            students = resultQuery.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

            await InvokeAsync(StateHasChanged);
        }
        else
            NotificationService.Notify(NotificationHelper.ErrorNotif(result.Error!.Message));
    }

    private async Task LoadSectionList()
    {
        var query = new GetSectionListQuery();

        var result = await Sender.Send(query);

        if (result.IsSuccess)
        {
            Sections = result.Data!;
        }
        else
            NotificationService.Notify(NotificationHelper.ErrorNotif(result.Error!.Message));
    }

    private async Task DoSearch()
    {
        if (LoadingService.IsLoading)
            return;

        var searchArgs = new LoadDataArgs()
            {
                Filter = string.Empty,
                OrderBy = string.Empty,
                Filters = new List<FilterDescriptor>(),
                Sorts = new List<SortDescriptor>(),
                Skip = 0,
                Top = int.MaxValue
            };

        await LoadData(searchArgs);
    }

    private async Task ResetFilters()
    {
        if (LoadingService.IsLoading)
            return;

        selectedYearLevel = null;
        selectedSection = null;
        selectedTrack = null;
        selectedStrand = null;
        hasStrands = false;

        var searchArgs = new LoadDataArgs()
            {
                Filter = string.Empty,
                OrderBy = string.Empty,
                Filters = new List<FilterDescriptor>(),
                Sorts = new List<SortDescriptor>(),
                Skip = 0,
                Top = int.MaxValue
            };

        await LoadData(searchArgs);
    }

    private void FilterStrandDropdownOnTrackSelect()
    {
        selectedStrand = null;

        if (selectedTrack == null)
        {
            hasStrands = false;

            Strands = Strand.GetAllStrands;

            StateHasChanged();

            return;
        }

        hasStrands = selectedTrack == Track.AcademicTrack.Id || selectedTrack == Track.TechnicalVocationalTrack.Id;

        Strands = Track.GetTrack(selectedTrack).Strands;

        StateHasChanged();
    }

    private async Task ViewStudentInfo(DataGridRowMouseEventArgs<StudentListViewModel> studentInfo)
    {
        var parameters = new Dictionary<string, object>()
        {
            { "id", studentInfo.Data.Id }
        };

        var dialogResult = await DialogService.OpenAsync<Student>($"Student {studentInfo.Data.StudentId}", parameters, DialogHelper.DefaultWideDialogOptions);

        if (dialogResult != null && typeof(bool) == dialogResult!.GetType())
        {
            if (dialogResult)
                await DoSearch();
        }
    }
}
