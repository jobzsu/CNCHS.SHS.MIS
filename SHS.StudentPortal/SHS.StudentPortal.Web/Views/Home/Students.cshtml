@using SHS.StudentPortal.Common.Models
@using SHS.StudentPortal.Common.Utilities.Models
@model PaginatedList<StudentListViewModel>
@{
    ViewData["Title"] = "Students";
}
<!-- Navbar Pagination -->
<div class="mt-3">
    <nav class="navbar navbar-light" style="background-color: #e3f2fd; border-radius: 5px">
        <div class="container-fluid">
            <form class="d-flex" asp-controller="Home" asp-action="Students" method="get">
                @* <input class="form-control me-2"
                type="search"
                placeholder="Search"
                aria-label="Search"
                name="searchKeyword"
                asp-for="@ViewData["SearchKeyword"]" />
                <select class="form-select me-2" name="studentType" style="width:300px" asp-for="@ViewData["StudentType"]">
                <option value="">-- Select Type --</option>
                <option value="pending">Pending</option>
                <option value="approved">Approved for Enrollment</option>
                <option value="enrolled-regular">Pending</option>
                <option value="enrolled-irregular">Irregular</option>
                </select> *@
                <select class="form-select me-2" name="yearLevel" asp-for="@ViewData["YearLevel"]">
                    <option value="">-- Select Grade --</option>
                    <option value="11">Grade 11</option>
                    <option value="12">Grade 12</option>
                </select>
                <select class="form-select me-2" name="sectionId" asp-for="@ViewData["SectionId"]" asp-items="@(new SelectList(ViewData["SectionList"] as List<KeyValuePair<string, string>>, "Key", "Value"))">
                    <option value="">-- Select Section --</option>
                </select>
                <select id="trackSelectList" class="form-select me-2" name="track" asp-for="@ViewData["Track"]" asp-items="@(new SelectList(Track.GetAllTracks, "Id", "Name"))">
                    <option value="">-- Select Track --</option>
                </select>
                <select id="strandSelectList" class="form-select me-2" name="strand" asp-for="@ViewData["Strand"]" asp-items="@(new SelectList(Strand.GetAllStrandsIncludePlaceholder, "Id", "Name"))">
                    <option value="">-- Select Strand --</option>
                </select>
                <button class="btn btn-outline-primary float-end me-2" type="submit">Search</button>
                <a href="@Url.Action("Students", "Home")" class="btn btn-outline-success float-end">Reset</a>
            </form>
        </div>
    </nav>
</div>
<nav aria-label="Page navigation example" class="mt-3">
    <ul class="pagination justify-content-end">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link link-dark"
               asp-action="Students"
               asp-route-searchKeyword="@ViewData["SearchKeyword"]"
               asp-route-studentType="@ViewData["StudentType"]"
               asp-route-yearLevel="@ViewData["YearLevel"]"
               asp-route-pageNumber="@(Model.PageIndex + 1)">Previous</a>
        </li>
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                <a class="page-link link-dark"
                   asp-action="Students"
                   asp-route-searchKeyword="@ViewData["SearchKeyword"]"
                   asp-route-studentType="@ViewData["StudentType"]"
                   asp-route-yearLevel="@ViewData["YearLevel"]"
                   asp-route-pageNumber="@i">@i</a>
            </li>
        }
        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link link-dark"
               asp-action="Students"
               asp-route-searchKeyword="@ViewData["SearchKeyword"]"
               asp-route-studentType="@ViewData["StudentType"]"
               asp-route-yearLevel="@ViewData["YearLevel"]"
               asp-route-pageNumber="@(Model.PageIndex + 1)">Next</a>
        </li>
    </ul>
</nav>
<table class="table table-striped table-hover text-center">
    <thead>
        <tr>
            <th scope="col">Student Id</th>
            <th scope="col">Name</th>
            <th scope="col">Gender</th>
            <th scope="col">Year Level</th>
            <th scope="col">Track & Strand</th>
            <th scope="col">Status</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Count() == 0)
        {
            <tr>
                <th colspan="7"><h3>No Records Found</h3></th>
            </tr>
        }
        else
        {
            foreach (var student in Model.ToList())
            {
                <tr>
                    <td>@student.StudentId</td>
                    <td>@student.Name</td>
                    <td>@student.Gender</td>
                    <td>@student.YearLevel</td>
                    <td style="">@student.TrackAndStrand</td>
                    <td>@student.Status</td>
                    <td><button class="btn btn-sm btn-primary" id="viewStudentInfo" onclick="viewStudentInfo('@student.Id')">View</button></td>
                </tr>
            }
        }
    </tbody>
</table>
<div id="modalPlaceholder"></div>

@section Scripts {
    <script type="text/javascript">
        var isLoading = false;

        var detailsModal;

        function viewStudentInfo(id) {
            if (isLoading) {
                Toast.fire({
                    icon: "warning",
                    title: "Page is Loading"
                });

                return;
            } else {
                isLoading = true;
                $.ajax({
                    url: `/Students/${id}`,
                    type: 'GET',
                    success: function (data) {
                        $('#modalPlaceholder').html(data);
                        detailsModal = new bootstrap.Modal(document.getElementById('detailsModal'), {
                            keyboard: false,
                            backdrop: 'static'
                        });
                        detailsModal.show();
                    },
                    error: () => {
                        Toast.fire({
                            icon: "warning",
                            title: "Error retrieving student details"
                        });
                    },
                    complete: () => {
                        isLoading = false;
                    }
                });
            }
        }

        function approveStudent(id) {
            if (isLoading) {
                Toast.fire({
                    icon: "warning",
                    title: "Page is Loading"
                });

                return;
            } else {
                let isSuccess = false;
                let errorMssg = '';

                Swal.fire({
                    title: "Student ready for Assessment",
                    text: "This action cannot be undone",
                    showCancelButton: true,
                    confirmButtonText: "Confirm",
                    confirmButtonColor: "#3085d6",
                    icon: "question",
                }).then((result) => {
                    /* Read more about isConfirmed, isDenied below */
                    if (result.isConfirmed) {

                        isLoading = true;

                        $.ajax({
                            url: `/Students/Approve/${id}`,
                            type: 'POST',
                            success: function (data) {
                                console.log(JSON.stringify(data));
                                isSuccess = data.IsSuccess;
                                if (!isSuccess) errorMssg = data.Message;
                            },
                            error: function (data) {
                                console.log('Error response', JSON.stringify(data));
                                errorMssg = "An error occurred while approving the Student.";
                            },
                            complete: function () {
                                isLoading = false;
                                if (isSuccess) {

                                    $('#modalPlaceholder').html('');
                                    detailsModal.hide();
                                    detailsModal.dispose();

                                    Toast.fire({
                                        icon: "success",
                                        title: "Student Approved"
                                    });

                                    setTimeout(() => {
                                        window.location = window.location.href;
                                    }, 3000)
                                } else {
                                    Toast.fire({
                                        icon: "warning",
                                        title: errorMssg
                                    });
                                }
                            }
                        });
                        //Swal.fire("Saved!", "", "success");
                    } else if (result.isDenied) {
                        Swal.fire("Changes are not saved", "", "info");
                    }
                });
            }
        }

        document.getElementById('trackSelectList')
            .addEventListener('change', (event) => {
                switch (event.target.value) {
                    case 'academic':
                        setAcademicTrackStrands();
                        break;
                    case 'artsanddesign':
                        setArtsAndDesignTrackStrands();
                        break;
                    case 'sports':
                        setSportsTrackStrands();
                        break;
                    case 'technicalvocational':
                        setTechnicalVocationalTrackStrands();
                        break;
                    default:
                        defaultList();
                        break;
                }
            });

        function setAcademicTrackStrands() {
            document.getElementById('strandSelectList').innerHTML = "";

            var academicTrackStrands = @Html.Raw(Json.Serialize(ViewBag.AcademicTrackStrands));

            academicTrackStrands.forEach((strand) => {
                document.getElementById('strandSelectList').innerHTML += `<option value="${strand.Id}">${strand.Name}</option>`
            });
        }

        function setArtsAndDesignTrackStrands() {
            document.getElementById('strandSelectList').innerHTML = "";

            var artsAndDesignTrackStrands = @(Html.Raw(Json.Serialize(ViewBag.ArtsAndDesignTrackStrands)));

            artsAndDesignTrackStrands.forEach((strand) => {
                document.getElementById('strandSelectList').innerHTML += `<option value="${strand.Id}">${strand.Name}</option>`
            });
        }

        function setSportsTrackStrands() {
            document.getElementById('strandSelectList').innerHTML = "";

            var sportsTrackStrands = @(Html.Raw(Json.Serialize(ViewBag.SportsTrackStrands)));

            sportsTrackStrands.forEach((strand) => {
                document.getElementById('strandSelectList').innerHTML += `<option value="${strand.Id}">${strand.Name}</option>`
            });
        }

        function setTechnicalVocationalTrackStrands() {
            document.getElementById('strandSelectList').innerHTML = "";

            var technicalVocationalTrackStrands = @(Html.Raw(Json.Serialize(ViewBag.TVLTrackStrands)));

            technicalVocationalTrackStrands.forEach((strand) => {
                document.getElementById('strandSelectList').innerHTML += `<option value="${strand.Id}">${strand.Name}</option>`;
            });
        }

        function defaultList() {
            document.getElementById('strandSelectList').innerHTML = "";

            document.getElementById('strandSelectList').innerHTML += `<option value="">-- Select Strand --</option>`;

            var academicTrackStrands = @(Html.Raw(Json.Serialize(ViewBag.AcademicTrackStrands)));

            academicTrackStrands.forEach((strand) => {
                document.getElementById('strandSelectList').innerHTML += `<option value="${strand.Id}">${strand.Name}</option>`
            });

            var technicalVocationalTrackStrands = @(Html.Raw(Json.Serialize(ViewBag.TVLTrackStrands)));

            technicalVocationalTrackStrands.forEach((strand) => {
                document.getElementById('strandSelectList').innerHTML += `<option value="${strand.Id}">${strand.Name}</option>`;
            });

            document.getElementById('strandSelectList').innerHTML += `<option value="">N/A</option>`;
        }

        var prevAcadRecordModal
        function openPrevAcademicRecordModal() {
            prevAcadRecordModal = bootstrap.Modal.getOrCreateInstance(document.getElementById('prevAcademicRecordModal'), {
                keyboard: false,
                backdrop: 'static'
            });
            prevAcadRecordModal.show();
        }

        var updatePasswordModal;
        function openUpdatePasswordModal() {
            updatePasswordModal = bootstrap.Modal.getOrCreateInstance(document.getElementById('updatePasswordModal'), {
                keyboard: false,
                backdrop: 'static'
            });

            updatePasswordModal.show();
        }

        function updateStudentPassword(id) {

            if (isLoading) {
                Toast.fire({
                    icon: "warning",
                    title: "Page is Loading"
                });

                return;
            } else {
                if ($('#updatePasswordNewPassword').val() == '' || $('#updatePasswordConfirmNewPassword').val() == '') {
                    Toast.fire({
                        icon: 'warning',
                        title: 'Please fill in all fields'
                    });

                    return;
                }

                if ($('#updatePasswordNewPassword').val().length < 6 || $('#updatePasswordConfirmNewPassword').val().length < 6) {
                    Toast.fire({
                        icon: 'warning',
                        title: 'Password must be at least 6 characters'
                    });

                    return;
                }

                if ($('#updatePasswordNewPassword').val() != $('#updatePasswordConfirmNewPassword').val()) {
                    Toast.fire({
                        icon: 'warning',
                        title: 'Passwords do not match'
                    });

                    return;
                }

                let isSuccess = false;
                let errorMssg = '';

                isLoading = true;

                $.ajax({
                    url: `/Students/UpdatePassword/${id}`,
                    type: 'POST',
                    data: {
                        newPassword: $('#updatePasswordNewPassword').val().toString()
                    },
                    dataType: 'json',
                    success: function (data) {
                        console.log(JSON.stringify(data));
                        isSuccess = data.IsSuccess;
                        if (!isSuccess) errorMssg = data.Message;
                    },
                    error: function (data) {
                        console.log('Error response', JSON.stringify(data));
                        errorMssg = "An error occurred while updating Student password.";
                    },
                    complete: function () {
                        isLoading = false;

                        if (isSuccess) {

                            updatePasswordModal.hide();

                            Toast.fire({
                                icon: "success",
                                title: "Password Updated"
                            });
                        } else {
                            Toast.fire({
                                icon: "warning",
                                title: errorMssg
                            });
                        }
                    }
                });
            }
        }

        function markStudentForEnrollment(id, status) {
            if (status == '@StudentStatuses.ForEnrollment.Id.ToUpper()') {
                Toast.fire({
                    icon: 'warning',
                    title: 'Student already for enrollment'
                });

                return;
            } else {
                if (isLoading) {
                    Toast.fire({
                        icon: "warning",
                        title: "Page is Loading"
                    });

                    return;
                } else {
                    Swal.fire({
                        title: "Student for Enrollment",
                        text: "This action cannot be undone",
                        showCancelButton: true,
                        confirmButtonText: "Confirm",
                        confirmButtonColor: "#3085d6",
                        icon: "question",
                    }).then((result) => {
                        if (result.isConfirmed) {

                            let isSuccess = false;
                            let errorMssg = '';

                            isLoading = true;

                            $.ajax({
                                url: `/Students/MarkForEnrollment/${id}`,
                                type: 'POST',
                                dataType: 'json',
                                success: function (data) {
                                    console.log(JSON.stringify(data));
                                    isSuccess = data.IsSuccess;
                                    if (!isSuccess) errorMssg = data.Message;
                                },
                                error: function (data) {
                                    console.log('Error response', JSON.stringify(data));
                                    errorMssg = "An error occurred while verifying the Student.";
                                },
                                complete: function () {
                                    isLoading = false;
                                    if (isSuccess) {

                                        prevAcadRecordModal.hide();
                                        detailsModal.hide();

                                        Toast.fire({
                                            icon: "success",
                                            title: "Student ready for Enrollment"
                                        });

                                        setTimeout(() => {
                                            window.location = window.location.href;
                                        }, 3000)
                                    } else {
                                        Toast.fire({
                                            icon: "warning",
                                            title: errorMssg
                                        });
                                    }
                                }
                            });
                        }
                    });
                }
            }
        }

        var enrollmentModal;
        function beginEnrollment(id) {
            if (isLoading) {
                Toast.fire({
                    icon: "warning",
                    title: "Page is Loading"
                });

                return;
            } else {
                isLoading = true;

                $.ajax({
                    url: `/Students/Enroll/${id}`,
                    type: 'GET',
                    success: function (data) {
                        $('#enrollmentModalPlaceholder').html(data);
                        enrollmentModal = bootstrap.Modal.getOrCreateInstance(document.getElementById('enrollmentModal'), {
                            keyboard: false,
                            backdrop: 'static'
                        });
                        enrollmentModal.show();
                    },
                    error: () => {
                        Toast.fire({
                            icon: "warning",
                            title: "Error retrieving enrollment details"
                        });
                    },
                    complete: () => {
                        isLoading = false;
                    }
                });
            }
        }

        var schedulesSelected = [];
        function addOrRemoveScheduleToEnroll(e, scheduleId) {

            if(e.checked) {
                if(!schedulesSelected.includes(scheduleId))
                    schedulesSelected.push(scheduleId);
            } else if(!e.checked) {
                if(schedulesSelected.includes(scheduleId))
                    schedulesSelected = schedulesSelected.filter(x => x != scheduleId);
            }
        }

        function refreshScheduleTable(e) {
            
            let selectedSchedulesTableBody = $('#selectedSchedulesTableBody');

            // Empty the table
            selectedSchedulesTableBody.empty();
            
            if(schedulesSelected.length > 0) {
             
                // Read the schedules from available schedules table where schedule Id is in schedulesSelected
                let availableSchedulesTableBody = document.getElementById("availableSchedulesTableBody").getElementsByTagName("tr");

                if (Array.from(availableSchedulesTableBody).length > 0) { 
                    // Parse the row as object
                    Array.from(availableSchedulesTableBody).forEach(row => {
                        const rowData = {
                            Id: row.cells[0].textContent,
                            Day: row.cells[1].textContent,
                            Subject: row.cells[2].textContent,
                            Instructor: row.cells[3].textContent,
                            Time: row.cells[4].textContent,
                            Room: row.cells[5].textContent
                        }

                        // Add the row to the table
                        if(schedulesSelected.includes(rowData.Id)) {
                            let row = `<tr><td hidden>${rowData.Id}</td><td>${rowData.Day}</td><td>${rowData.Subject}</td><td>${rowData.Instructor}</td><td>${rowData.Time}</td><td>${rowData.Room}</td></tr>`;

                            selectedSchedulesTableBody.append(row);
                        }
                    });
                }
            }
            
            bootstrap.Modal.getOrCreateInstance(document.getElementById('schedulesModal')).hide();
        }

        function enrollStudent(studentId) {

            if (isLoading) {
                Toast.fire({
                    icon: "warning",
                    title: "Page is Loading"
                });

                return;
            } else {

                let designatedGradeLevel = document.getElementById('designatedGradeLevel').value;
                let designatedSection = document.getElementById('designatedSection').value;
                let designatedStatus = document.getElementById('designatedStatus').value;

                if(designatedGradeLevel == '') {
                    Toast.fire({
                        icon: "warning",
                        title: "Designated Grade Level is required"
                    });

                    return;
                } else if (designatedSection == '') {
                    Toast.fire({
                        icon: "warning",
                        title: "Designated Section is required"
                    });

                    return;
                } else if (designatedStatus == '') {
                    Toast.fire({
                        icon: "warning",
                        title: "Designated Status is required"
                    });

                    return;
                } else if(schedulesSelected.length == 0) {
                    Toast.fire({
                        icon: "warning",
                        title: "No schedules selected"
                    });

                    return;
                } else {

                    let isSuccess = false;
                    let errorMssg = '';

                    let enrollmentData = {
                        StudentId: studentId,
                        DesignatedGradeLevel: designatedGradeLevel,
                        DesignatedSection: designatedSection,
                        DesignatedStatus: designatedStatus,
                        SelectedSchedules: schedulesSelected
                    };

                    console.log(enrollmentData);

                    isLoading = true;

                    $.ajax({
                        url: `/Students/Enroll/${studentId}`,
                        type: "POST",
                        data: enrollmentData,
                        success: function (data) {
                            isSuccess = data.IsSuccess;
                            if (!isSuccess) errorMssg = data.Message;
                        },
                        error: () => {
                            errorMssg = "An error occurred while enrolling the Student.";
                        },
                        complete: () => {
                            isLoading = false;
                            if (isSuccess) {

                                enrollmentModal.hide();
                                $('#enrollmentModalPlaceholder').html = '';

                                Toast.fire({
                                    icon: "success",
                                    title: "Student Successfully Enrolled"
                                });

                                setTimeout(() => {
                                    window.location = window.location.href;
                                }, 3000)
                            } else {
                                Toast.fire({
                                    icon: "warning",
                                    title: errorMssg
                                });
                            }
                        }
                    });
                }
            }
        }

        switch ('@(ViewBag.Track)') {
            case 'academic':
                setAcademicTrackStrands();
                break;
            case 'artsanddesign':
                setArtsAndDesignTrackStrands();
                break;
            case 'sports':
                setSportsTrackStrands();
                break;
            case 'technicalvocational':
                setTechnicalVocationalTrackStrands();
                break;
        }
    </script>
}
